UTILIZING MESSAGING AND INTEGRATION SERVICES SQS

Loose Coupling
  Coupling defines the interdependencies or connections between components of a system. Loose coupling helps reduce the risk of cascading failures between components.
  
  Monolithic Application
    Tipically represents Tight coupling, large application with alot of interdependencies.
    Tighly coupled components are highly dependent on each other. 

  Microservices
    Loosely coupled components are connected but not dependent on each other.
    
Queues
  are used to implement loosely couple systems
  It is data structure FIFO that holds requests or messages
  
SQS in the Real World 
  Build a money transfer app that performs well under heavy load.
  SQS lets you build an app that is loosely couple, allowing components to send, store, and receive messages. The use of a messaging queue helps to improve performance and scalabitily.  

  ex:
    Produce money transfer request > Request added to the queue > (SQS) There may be other requests in front of or behind yours > Requests processed in first-in-first-out (FIFO) > Some time later, your friend receives the money you sent.


